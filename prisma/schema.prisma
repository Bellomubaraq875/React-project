// Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Parent {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Student {
  id         String       @id // @default(cuid())
  username   String       @unique
  name       String
  surname    String
  email      String       @unique
  class      String?
  age        Int?
  sex        UserSex
  address    String
  img        String
  bloodType  String
  createdAt  DateTime     @default(now())
  parentId   String
  parent     Parent       @relation(fields: [parentId], references: [id])
  Result     Result[]
  Class      Class?       @relation(fields: [classId], references: [id])
  classId    String?
  Attendance Attendance[]
}

model Teacher {
  id        String   @id @default(cuid())
  username  String   @unique
  name      String
  surname   String
  email     String   @unique
  subject   String?
  phone     String?
  address   String?
  sex       UserSex
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessons   Lesson[]
  Class     Class[]
}

model Subject {
  id         String       @id @default(cuid())
  name       String       @unique
  code       String?
  createdAt  DateTime     @default(now())
  lessons    Lesson[]
  Exam       Exam[]
  Assignment Assignment[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  teacherId   String
  subjectId   Int
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  createdAt   DateTime @default(now())
  day         Day
  startTime   DateTime
  endTime     DateTime
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
}

model Exam {
  id        String   @id @default(cuid())
  title     String
  subjectId String
  className String?
  date      DateTime
  createdAt DateTime @default(now())
  subject   Subject  @relation(fields: [subjectId], references: [id])
  Result    Result[]
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  subjectId   String
  dueDate     DateTime
  createdAt   DateTime @default(now())
  subject     Subject  @relation(fields: [subjectId], references: [id])
}

model Result {
  id        String   @id @default(cuid())
  studentId String
  examId    String
  score     Float
  grade     String
  student   Student  @relation(fields: [studentId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])
  createdAt DateTime @default(now())
}

model Class {
  id        String    @id // @default(cuid())
  name      String
  capacity  Int
  lesson   Lesson[]
  // teacherId String?
  // students  Student[]
  // teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  // createdAt DateTime  @default(now())
}

model Attendance {
  id        String   @id @default(cuid())
  date      DateTime
  status    String
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY 
  WEDNESDAY
  THURSDAY
  FRIDAY
  
}
